{"ast":null,"code":"var _jsxFileName = \"/Users/doyoungkim/Library/Mobile Documents/com~apple~CloudDocs/\\uD835\\uDDD7\\uD835\\uDFEC\\uD835\\uDFEC\\uD835\\uDFEE/ITU/Project/ITU-Name/client/src/components/FilterPanel/FilterPanel.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport \"./FilterPanel.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FilterPanel = ({\n  onFilterChange\n}) => {\n  _s();\n  const [selectedTypes, setSelectedTypes] = useState([]);\n  const [selectedColors, setSelectedColors] = useState([]);\n  const [selectedMaterials, setSelectedMaterials] = useState([]);\n  const [isVisible, setIsVisible] = useState(true); // State to control visibility\n\n  const types = [\"pants\", \"top\"];\n  const colors = [\"black\", \"gray\", \"white\", \"blue\", \"beige\", \"green\"];\n  const materials = [\"viscose\", \"lyocell\", \"cotton\", \"polyester\", \"polyamide\", \"elastane\", \"linen\"];\n  const handleTypeChange = type => {\n    const updatedTypes = selectedTypes.includes(type) ? selectedTypes.filter(t => t !== type) : [...selectedTypes, type];\n    setSelectedTypes(updatedTypes);\n    onFilterChange({\n      type: updatedTypes,\n      color: selectedColors,\n      material: selectedMaterials\n    });\n  };\n  const handleColorChange = color => {\n    const updatedColors = selectedColors.includes(color) ? selectedColors.filter(c => c !== color) : [...selectedColors, color];\n    setSelectedColors(updatedColors);\n    onFilterChange({\n      type: selectedTypes,\n      color: updatedColors,\n      material: selectedMaterials\n    });\n  };\n  const handleMaterialChange = material => {\n    const updatedMaterials = selectedMaterials.includes(material) ? selectedMaterials.filter(m => m !== material) : [...selectedMaterials, material];\n    setSelectedMaterials(updatedMaterials);\n    onFilterChange({\n      type: selectedTypes,\n      color: selectedColors,\n      material: updatedMaterials\n    });\n  };\n  const handleReset = () => {\n    setSelectedTypes([]);\n    setSelectedColors([]);\n    setSelectedMaterials([]);\n    onFilterChange({\n      type: [],\n      color: [],\n      material: []\n    });\n  };\n  const toggleVisibility = () => {\n    setIsVisible(!isVisible);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"toggle-button\",\n      onClick: toggleVisibility,\n      children: isVisible ? 'Hide Filters' : 'Show Filters'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `filter-panel ${isVisible ? '' : 'hidden'}`,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        children: \"Reset All Filters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Filter by Type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), types.map(type => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: selectedTypes.includes(type),\n          onChange: () => handleTypeChange(type)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: type\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this)]\n      }, type, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Filter by Color\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), colors.map(color => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `color-button ${color.toLowerCase()} ${selectedColors.includes(color) ? 'clicked' : ''}`,\n        onClick: () => handleColorChange(color)\n      }, color, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Filter by Material\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), materials.map(material => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: selectedMaterials.includes(material),\n          onChange: () => handleMaterialChange(material)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: material\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)]\n      }, material, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(FilterPanel, \"5NgvBvjP86JfBZkPz17of+pnpXQ=\");\n_c = FilterPanel;\nexport default FilterPanel;\nvar _c;\n$RefreshReg$(_c, \"FilterPanel\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","FilterPanel","onFilterChange","_s","selectedTypes","setSelectedTypes","selectedColors","setSelectedColors","selectedMaterials","setSelectedMaterials","isVisible","setIsVisible","types","colors","materials","handleTypeChange","type","updatedTypes","includes","filter","t","color","material","handleColorChange","updatedColors","c","handleMaterialChange","updatedMaterials","m","handleReset","toggleVisibility","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","checked","onChange","toLowerCase","_c","$RefreshReg$"],"sources":["/Users/doyoungkim/Library/Mobile Documents/com~apple~CloudDocs/𝗗𝟬𝟬𝟮/ITU/Project/ITU-Name/client/src/components/FilterPanel/FilterPanel.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport \"./FilterPanel.css\";\r\n\r\ninterface FilterPanelProps {\r\n  onFilterChange: (filters: { type: string[]; color: string[]; material: string[] }) => void;\r\n}\r\n\r\nconst FilterPanel: React.FC<FilterPanelProps> = ({ onFilterChange }) => {\r\n  const [selectedTypes, setSelectedTypes] = useState<string[]>([]);\r\n  const [selectedColors, setSelectedColors] = useState<string[]>([]);\r\n  const [selectedMaterials, setSelectedMaterials] = useState<string[]>([]);\r\n  const [isVisible, setIsVisible] = useState<boolean>(true); // State to control visibility\r\n\r\n  const types = [\"pants\", \"top\"];\r\n  const colors = [\"black\", \"gray\", \"white\", \"blue\", \"beige\", \"green\"];\r\n  const materials = [\"viscose\", \"lyocell\", \"cotton\", \"polyester\", \"polyamide\", \"elastane\", \"linen\"];\r\n\r\n  const handleTypeChange = (type: string) => {\r\n    const updatedTypes = selectedTypes.includes(type)\r\n      ? selectedTypes.filter(t => t !== type)\r\n      : [...selectedTypes, type];\r\n    setSelectedTypes(updatedTypes);\r\n    onFilterChange({ type: updatedTypes, color: selectedColors, material: selectedMaterials });\r\n  };\r\n\r\n  const handleColorChange = (color: string) => {\r\n    const updatedColors = selectedColors.includes(color)\r\n      ? selectedColors.filter(c => c !== color)\r\n      : [...selectedColors, color];\r\n    setSelectedColors(updatedColors);\r\n    onFilterChange({ type: selectedTypes, color: updatedColors, material: selectedMaterials });\r\n  };\r\n\r\n  const handleMaterialChange = (material: string) => {\r\n    const updatedMaterials = selectedMaterials.includes(material)\r\n      ? selectedMaterials.filter(m => m !== material)\r\n      : [...selectedMaterials, material];\r\n    setSelectedMaterials(updatedMaterials);\r\n    onFilterChange({ type: selectedTypes, color: selectedColors, material: updatedMaterials });\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setSelectedTypes([]);\r\n    setSelectedColors([]);\r\n    setSelectedMaterials([]);\r\n    onFilterChange({ type: [], color: [], material: [] });\r\n  };\r\n\r\n  const toggleVisibility = () => {\r\n    setIsVisible(!isVisible);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <button className=\"toggle-button\" onClick={toggleVisibility}>\r\n        {isVisible ? 'Hide Filters' : 'Show Filters'}\r\n      </button>\r\n      <div className={`filter-panel ${isVisible ? '' : 'hidden'}`}>\r\n        <button onClick={handleReset}>Reset All Filters</button>\r\n        <h4>Filter by Type</h4>\r\n        {types.map(type => (\r\n          <div key={type}>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={selectedTypes.includes(type)}\r\n              onChange={() => handleTypeChange(type)}\r\n            />\r\n            <label>{type}</label>\r\n          </div>\r\n        ))}\r\n        <h4>Filter by Color</h4>\r\n        {colors.map(color => (\r\n          <button\r\n              key={color}\r\n              className={`color-button ${color.toLowerCase()} ${selectedColors.includes(color) ? 'clicked' : ''}`}\r\n              onClick={() => handleColorChange(color)}\r\n          />\r\n        ))}\r\n        <h4>Filter by Material</h4>\r\n        {materials.map(material => (\r\n          <div key={material}>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={selectedMaterials.includes(material)}\r\n              onChange={() => handleMaterialChange(material)}\r\n            />\r\n            <label>{material}</label>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FilterPanel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}